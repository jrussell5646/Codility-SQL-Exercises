--Set up

--Given a table events with the following structure:

--  create table events (
--      event_type integer not null,
--      value integer not null,
--      time timestamp not null,
--      unique(event_type, time)
--  );
--write an SQL query that, for each event_type that has been registered more than once, returns the difference between the latest (i.e. the most recent in terms of time) and the second latest value. The table should be ordered by event_type (in ascending order).

--For example, given the following data:

--   event_type | value      | time
--  ------------+------------+--------------------
--   2          | 5          | 2015-05-09 12:42:00
--   4          | -42        | 2015-05-09 13:19:57
--   2          | 2          | 2015-05-09 14:48:30
--   2          | 7          | 2015-05-09 12:54:39
--   3          | 16         | 2015-05-09 13:19:57
--   3          | 20         | 2015-05-09 15:01:09
--your query should return the following rowset:

--   event_type | value
--  ------------+-----------
--   2          | -5
--   3          | 4
--For the event_type 2, the latest value is 2 and the second latest value is 7, so the difference between them is âˆ’5.

--The names of the columns in the rowset don't matter, but their order does.


--Creates table for test data
DROP TABLE IF EXISTS events
create table events (
      event_type integer not null,
      value integer not null,
      time datetime not null,
      unique(event_type, time))

--Loads test data into table
insert into events values(2, 5, '2015-05-09 12:42:00');
insert into events values(4, -42, '2015-05-09 13:19:57');
insert into events values(2, 2, '2015-05-09 14:48:30');
insert into events values(2, 7, '2015-05-09 12:54:39');
insert into events values(3, 16, '2015-05-09 13:19:57');
insert into events values(3, 20, '2015-05-09 15:01:09');

--Check table
select *
from events

--Creates column row and assignes row number for each entry by event_type ordered from newest to oldest time
SELECT event_type, value, time,
                ROW_NUMBER () OVER (
                PARTITION BY event_type
                ORDER BY time DESC) AS row
From events

--Two CTEs used to extract data from 1st (Latest) and 2nd (second) rows

WITH fe AS (
	SELECT event_type, value as f_value
	FROM (
		SELECT event_type, value, time,
		ROW_NUMBER () OVER (
			PARTITION BY event_type
			ORDER BY time DESC
			) AS row
		From events
		) e1
	WHERE row = 1
), 
se AS (
	SELECT event_type, value as s_value
	FROM (
		SELECT event_type, value, time,
		ROW_NUMBER () OVER (
			PARTITION BY event_type
			ORDER BY time DESC
			) AS row
		From events
		) e1
	WHERE row = 2
)
SELECT se.event_type, fe.f_value - se.s_value AS value
FROM se
JOIN fe
ON se.event_type = fe.event_type
ORDER BY event_type

--Similar answer from stackoverflow
WITH CTE
     AS (SELECT event_type,
                value,
                time,
                Row_number()
                  OVER(
                    PARTITION BY event_type
                    ORDER BY time DESC) AS RN
         FROM   events)
SELECT A.event_type,
       ( A.value - B.value ) AS Value
FROM   (SELECT *
        FROM   CTE
        WHERE  RN = 1)A
JOIN   (SELECT *
        FROM   CTE
        WHERE  RN = 2)B ON A.event_type = B.event_TYPE 
